/* Copyright 2018 MechMerlin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include QMK_KEYBOARD_H

// Defines the keycodes used by our macros in process_record_user
// enum custom_keycodes {};


// Define Tap Dancing
enum {
  TD_CPY_PST,
  TD_LBRA,
  TD_RBRA,
  TD_CAPEND,
};

void copy_pasta(tap_dance_state_t *state, void *user_data) {

  /*
   * Taps:
   * 1: Paste
   * 2: Cut left word
   * 3: Cut Right word
   * 4: Cut Selected
   */

  if (state->count >= 4) {

    SEND_STRING(SS_LCTL("x"));
    reset_tap_dance(state);

  } else if (state->count == 3) {

    SEND_STRING(SS_LCTL(SS_LSFT(SS_TAP(X_RIGHT))) SS_LCTL("x"));
    reset_tap_dance(state);

  } else if (state->count == 2) {

    SEND_STRING(SS_LCTL(SS_LSFT(SS_TAP(X_LEFT))) SS_LCTL("x"));
    reset_tap_dance(state);

  } else {

    SEND_STRING(SS_LCTL("v"));
    reset_tap_dance(state);

  }
}

tap_dance_action_t tap_dance_actions[] = {
  [TD_CPY_PST] = ACTION_TAP_DANCE_FN(copy_pasta),
  [TD_LBRA]    = ACTION_TAP_DANCE_DOUBLE(KC_LBRC, KC_LCBR),
  [TD_RBRA]    = ACTION_TAP_DANCE_DOUBLE(KC_RBRC, KC_RCBR),
  [TD_CAPEND]  = ACTION_TAP_DANCE_DOUBLE(KC_END, KC_CAPS),
};

// END Tap Dancing definition


// Define Underglow

// Cap lock
// const rgblight_segment_t PROGMEM my_caps_layer[] = RGBLIGHT_LAYER_SEGMENTS(
//   {0, 16, HSV_BLUE}
// );

// Default
// const rgblight_segment_t PROGMEM my_l0_layer[] = RGBLIGHT_LAYER_SEGMENTS(
//   {0, 16, HSV_PURPLE}
// );

// Layer 1 -> 3
// const rgblight_segment_t PROGMEM my_l1_layer[] = RGBLIGHT_LAYER_SEGMENTS(
//   {15, 1, HSV_CYAN}
// );

// const rgblight_segment_t PROGMEM my_l2_layer[] = RGBLIGHT_LAYER_SEGMENTS(
//   {14, 2, HSV_CYAN}
// );

// const rgblight_segment_t PROGMEM my_l3_layer[] = RGBLIGHT_LAYER_SEGMENTS(
//   {13, 3, HSV_CYAN}
// );

// Media keys
// const rgblight_segment_t PROGMEM my_l4_layer[] = RGBLIGHT_LAYER_SEGMENTS(
//   {7, 3, HSV_SPRINGGREEN}
// );

// const rgblight_segment_t* const PROGMEM rgb_layers[] = RGBLIGHT_LAYERS_LIST(
//   my_l0_layer,
//   my_l1_layer,
//   my_l2_layer,
//   my_l3_layer,
//   my_l4_layer,
//   my_caps_layer
// );

// void keyboard_post_init_user(void) {
//   rgblight_layers = rgb_layers;
//   rgblight_sethsv_noeeprom(HSV_PURPLE);
//   rgblight_mode_noeeprom(RGBLIGHT_MODE_STATIC_LIGHT);
// }

// bool led_update_user(led_t led_state) {
//   rgblight_set_layer_state(5, led_state.caps_lock);
//   return true;
// }

// layer_state_t default_layer_state_set_user(layer_state_t state) {
//   rgblight_set_layer_state(0, layer_state_cmp(state, 0));
//   return state;
// }

// layer_state_t layer_state_set_user(layer_state_t state) {
//   rgblight_set_layer_state(1, layer_state_cmp(state, 1));
//   rgblight_set_layer_state(2, layer_state_cmp(state, 2));
//   rgblight_set_layer_state(3, layer_state_cmp(state, 3));
//   rgblight_set_layer_state(4, layer_state_cmp(state, 4));
//   return state;
// }

// END Underglow

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
 [0] = LAYOUT_ortho_5x15( // Default layer
    KC_ESC,               KC_1,    KC_2,    KC_3,    KC_4,     KC_5,    KC_PGUP, TO(1),   KC_PGDN, KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_DEL,
    KC_TAB,               KC_Q,    KC_W,    KC_E,    KC_R,     KC_T,    KC_P7,   KC_P8,   KC_P9,   KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_HOME,
    MT(MOD_LCTL, KC_ESC), KC_A,    KC_S,    KC_D,    KC_F,     KC_G,    KC_P4,   KC_P5,   KC_P6,   KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, LT(4, KC_NUBS),
    KC_LSFT,              KC_Z,    KC_X,    KC_C,    KC_V,     KC_B,    KC_P1,   KC_P2,   KC_P3,   KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH, KC_QUOT,
    TD(TD_CAPEND),        KC_LGUI, KC_LALT, OSL(2),  OSL(1),   KC_SPC,  KC_GRV,  KC_P0,   KC_PDOT, KC_BSPC, KC_ENT,  KC_LEFT, KC_DOWN, KC_UP,   KC_RGHT
  ),
 [1] = LAYOUT_ortho_5x15(// Numpad, shifted keys ( (), {}, [], <>, FN Keys )
    KC_TRNS,              KC_F1,   KC_F2,   KC_F3,   KC_F4,    KC_F5,   KC_TRNS, TO(2),   KC_TRNS, KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_F12,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_LPRN, KC_LCBR,  KC_LBRC, KC_TRNS, KC_TRNS, KC_TRNS, KC_RBRC, KC_RCBR, KC_RPRN, KC_NUHS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_MINS,  KC_UNDS, KC_TRNS, KC_TRNS, KC_TRNS, KC_EQL,  KC_PLUS, KC_TRNS, KC_TRNS, KC_PGUP, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, TO(0),   KC_TRNS,  KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_PGDN, KC_TRNS
 ),
 [2] = LAYOUT_ortho_5x15(// HJKL as arrow keys like VIM
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS, TO(3),   KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_LEFT, KC_DOWN, KC_UP,   KC_RIGHT,KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, TO(0),   TO(1),    KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS
 ),
 [3] = LAYOUT_ortho_5x15( // Nothing at the moment
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, RGB_RMOD,    KC_TRNS, RGB_MOD,     KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, TO(0),   TO(2),    KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS,     KC_TRNS, KC_NO,   KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS
 ),
 [4] = LAYOUT_ortho_5x15(// Media, bootmode and sleep
    QK_BOOT,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_SLEP, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS, KC_TRNS, KC_MPLY, KC_TRNS, KC_MUTE,
    KC_TRNS,              KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,  KC_TRNS, KC_TRNS,     KC_TRNS, KC_TRNS,     KC_TRNS, KC_NO,   KC_MPRV, KC_VOLD, KC_VOLU, KC_MNXT
 ),
};

/*bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {
    case SELRWORD:
      if (record->event.pressed) {
        // when keycode QMKBEST is pressed
        SEND_STRING("QMK is the best thing ever!");
      } else {
        // when keycode QMKBEST is released
      }
      break;
    case QMKURL:
      if (record->event.pressed) {
        // when keycode QMKURL is pressed
        SEND_STRING("https://qmk.fm/" SS_TAP(X_ENTER));
      } else {
        // when keycode QMKURL is released
      }
      break;
  }
  return true;
}*/
